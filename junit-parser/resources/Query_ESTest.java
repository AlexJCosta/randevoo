/*
 * This file was automatically generated by EvoSuite
 * Mon May 20 21:45:37 GMT 2019
 */

package net.kencochrane.a4j.data;

import org.junit.Test;
import static org.junit.Assert.*;
import java.util.ArrayList;
import net.kencochrane.a4j.data.Query;

public class Query_ESTest {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Query query0 = new Query();
      String string0 = query0.BlendedSearchGenerator("**Be]nk7t7Os^$v8", "]IFk,g{FBf>636A}6R");
      assertEquals("http://xml.amazon.net/onca/xml3?t=popcornmonste2-20&dev-t=DSB0XDDW1GQ3S&BlendedSearch=%5DIFk%2Cg%7BFBf%3E636A%7D6R&type=**Be]nk7t7Os^$v8&f=xml", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Query query0 = new Query();
      String string0 = query0.SearchQueryGenerator((String) null, "", "", (String) null, (String) null, "");
      assertEquals("http://xml.amazon.net/onca/xml3?t=popcornmonste2-20&dev-t=DSB0XDDW1GQ3S&null=&mode=&type=null&page=null&offer=&f=xml", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Query query0 = new Query();
      String string0 = query0.AddtoCart("~{imtM5!@H.", "~{imtM5!@H.");
      assertEquals("http://xml.amazon.net/onca/xml3?ShoppingCart=add&f=xml&dev-t=DSB0XDDW1GQ3S&t=popcornmonste2-20&Asin.~{imtM5!@H.=~{imtM5!@H.", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Query query0 = new Query();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      // Undeclared exception!
      try { 
        query0.queryGenerator("&CartId=", "&CartId=", "", "", arrayList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Query query0 = new Query();
      String string0 = query0.KeywordSearchGenerator("ShoppingCart=modify&f=xml&dev-t=", "3I|Llhj0b*R[h'", "3I|Llhj0b*R[h'", "mCaPQeGFGj]|n");
      assertEquals("http://xml.amazon.net/onca/xml3?t=popcornmonste2-20&dev-t=DSB0XDDW1GQ3S&KeywordSearch=ShoppingCart%3Dmodify%26f%3Dxml%26dev-t%3D&mode=3I|Llhj0b*R[h'&type=3I|Llhj0b*R[h'&page=mCaPQeGFGj]|n&f=xml", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Query query0 = new Query();
      String string0 = query0.browseNodeQueryGenerator("", "dev-t=", "", "dev-t=", "");
      assertEquals("http://xml.amazon.net/onca/xml3?t=popcornmonste2-20&dev-t=DSB0XDDW1GQ3S&BrowseNodeSearch=&mode=dev-t=&type=&page=dev-t=&offer=&f=xml", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Query query0 = new Query();
      String string0 = query0.SearchThirdPartyGenerator(":do[Z", "6?e=T|$l", "<VeQjhd", "<VeQjhd");
      assertEquals("http://xml.amazon.net/onca/xml3?t=popcornmonste2-20&dev-t=DSB0XDDW1GQ3S&SellerSearch=:do[Z&type=6?e=T|$l&page=<VeQjhd&offerstatus=<VeQjhd&f=xml", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Query query0 = new Query();
      // Undeclared exception!
      try { 
        query0.ClearCart((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Query query0 = new Query();
      String string0 = query0.ModifyCart("2>23FIq[>)uC]f)`ooi", "2>23FIq[>)uC]f)`ooi", "f?{'8xdo=HE", "2>23FIq[>)uC]f)`ooi");
      assertEquals("http://xml.amazon.net/onca/xml3?ShoppingCart=modify&f=xml&dev-t=DSB0XDDW1GQ3S&t=popcornmonste2-20&Item.2>23FIq[>)uC]f)`ooi=2>23FIq[>)uC]f)`ooi&CartId=f?{'8xdo=HE&Hmac=2%3E23FIq%5B%3E%29uC%5Df%29%60ooi", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Query query0 = new Query();
      String string0 = query0.AddToExistingCart("Xd$}TG27W", "Xd$}TG27W", "!1N?x1!%Ubq?xF", "`W9&Vo:cv!TURCFL");
      assertEquals("http://xml.amazon.net/onca/xml3?ShoppingCart=add&f=xml&dev-t=DSB0XDDW1GQ3S&t=popcornmonste2-20&Asin.Xd$}TG27W=Xd$}TG27W&CartId=!1N?x1!%Ubq?xF&Hmac=%60W9%26Vo%3Acv%21TURCFL", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Query query0 = new Query();
      String string0 = query0.GetItemsFromCart("'%qh2R", "'%qh2R");
      assertEquals("http://xml.amazon.net/onca/xml3?ShoppingCart=get&f=xml&dev-t=DSB0XDDW1GQ3S&t=popcornmonste2-20&CartId='%qh2R&Hmac=%27%25qh2R", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Query query0 = new Query();
      String string0 = query0.RemoveFromCart("ShoppingCart=clear&f=xml&dev-t=", "ShoppingCart=clear&f=xml&dev-t=", "ShoppingCart=clear&f=xml&dev-t=");
      assertEquals("http://xml.amazon.net/onca/xml3?ShoppingCart=remove&f=xml&dev-t=DSB0XDDW1GQ3S&t=popcornmonste2-20&Item.ShoppingCart=clear&f=xml&dev-t=&CartId=ShoppingCart=clear&f=xml&dev-t=&Hmac=ShoppingCart%3Dclear%26f%3Dxml%26dev-t%3D", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Query query0 = new Query();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      // Undeclared exception!
      try { 
        query0.generateMultipleSearchString("AsinSearch", arrayList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Query query0 = new Query();
      // Undeclared exception!
      try { 
        query0.generateMultipleSearchString("AsinSearch", (ArrayList) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Query query0 = new Query();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      arrayList0.add((Object) "AsinSearch");
      arrayList0.add((Object) "r<xoav0[.(lV");
      String string0 = query0.generateMultipleSearchString("AsinSearch", arrayList0);
      assertEquals("AsinSearch,r<xoav0[.(lV", string0);
  }
}
